package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, TIMES, ASSIGN, EQ, NEQ, LT, GT, LTE, GTE, AND, OR, NOT, LPAREN, RPAREN, LBRACE, RBRACE, COMMA, SEMICOLON, INT, RETURN, IF, ELSE, PRINT, UMINUS;
terminal Long    INTCONST;
terminal String  IDENT;

non terminal Program         program;
non terminal Stmt            stmt;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal FuncDef         funcDef;
non terminal FormalDeclList  formalDecList;
non terminal StmtList        stmtList;
non terminal VarDecl         varDecl;
non terminal Cond             cond;

precedence left PRINT;
precedence left IF;
precedence left ELSE;
precedence left AND, OR;
precedence left NOT;
precedence left EQ, NEQ;
precedence left LT, GT, LTE, GTE;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

start with program;

program ::= funcDef:f
         {: RESULT = new Program(f, loc(fleft, fright)); :}
      ;

funcDef ::= INT IDENT:id LPAREN formalDecList:params RPAREN LBRACE stmtList:body RBRACE:rbrace
     {: RESULT = new FuncDef(id, params, body, loc(idleft, rbraceright)); :}
;

formalDecList ::= INT IDENT:arg
     {: 
        RESULT = new FormalDeclList(List.of(new VarDecl("int", arg, null, loc(argleft, argright))), loc(argleft, argright));
     :}
|  /* empty */
     {: RESULT = new FormalDeclList(new ArrayList<>(), loc(0, 0)); :}
;

stmtList ::= stmt:s
         {: RESULT = new StmtList(new ArrayList<>(List.of(s)), loc(sleft, sright)); :}
      |  stmtList:sl stmt:s
         {: 
            sl.addStmt(s);
            RESULT = sl;
         :}
      ;
      
stmt ::= RETURN expr:e SEMICOLON
         {: RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
      |  varDecl:v SEMICOLON
         {: RESULT = v; :}
       |  IF LPAREN cond:c RPAREN stmt:s 
          {: RESULT = new IfStmt(c, s, loc(cleft, cright)); :}
       | IF LPAREN cond:c RPAREN stmt:s1 ELSE stmt:s2
         {: RESULT = new IfElseStmt(c, s1, s2, loc(cleft, cright)); :}
      |  LBRACE stmtList:sl RBRACE
          {: RESULT = new BlockStmt(sl, loc(slleft, slright)); :}
      | PRINT expr:e SEMICOLON
         {: RESULT = new PrintStmt(e, loc(eleft, eright)); :}
      ;

varDecl ::= INT IDENT:id ASSIGN expr:e
         {: RESULT = new VarDecl("int", id, e, loc(idleft, idright)); :}
      ;

cond ::= expr:e1 LTE expr:e2
         {: RESULT = new Cond(e1, Cond.LTE, e2, loc(e1left,e1right)); :}
      |  expr:e1 GTE expr:e2
         {: RESULT = new Cond(e1, Cond.GTE, e2, loc(e1left,e1right)); :}
      |  expr:e1 EQ expr:e2
         {: RESULT = new Cond(e1, Cond.EQ, e2, loc(e1left,e1right)); :}
      |  expr:e1 NEQ expr:e2
         {: RESULT = new Cond(e1, Cond.NEQ, e2, loc(e1left,e1right)); :}
      |  expr:e1 LT expr:e2
         {: RESULT = new Cond(e1, Cond.LT, e2, loc(e1left,e1right)); :}
      |  expr:e1 GT expr:e2
         {: RESULT = new Cond(e1, Cond.GT, e2, loc(e1left,e1right)); :} 
      | cond:c1 AND cond:c2
         {: RESULT = new Cond(c1, Cond.AND, c2, loc(c1left, c2right)); :}
      | cond:c1 OR cond:c2
         {: RESULT = new Cond(c1, Cond.OR, c2, loc(c1left, c2right)); :}
      | NOT cond:c
         {: RESULT = new Cond(c, Cond.NOT, null, loc(cleft, cright)); :}
      |  LPAREN cond:c RPAREN
         {: RESULT = c; :}    
         ;

expr ::=  INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  IDENT:id
         {: RESULT = new VarExpr(id, loc(idleft, idright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      | MINUS expr:e
         {: RESULT = new UnaryExpr(UnaryExpr.MINUS, e, loc(eleft, eright)); :}
         %prec UMINUS
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
      |  expr:e1 MINUS expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
      |  expr:e1 TIMES expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
      ;